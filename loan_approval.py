# -*- coding: utf-8 -*-
"""loan approval

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x3RvN97X45I_hDOFBx1NstPjJulYIFQw
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler

"""DATA COLLECTION AND DATA PREPROCESSING

"""

loan_dataset=pd.read_csv('/content/loan_data_set.csv')

loan_dataset.head()

loan_dataset.tail()

loan_dataset.shape

loan_dataset.describe()

loan_dataset.isnull().sum()

"""DROPIING THE MISSING VALUES"""

loan_dataset=loan_dataset.dropna()

loan_dataset.isnull().sum()

"""LABLE ENCODING

REPLACING NO INTO---> 0

REPLACING YES INTO ---> 1

"""

loan_dataset.replace({"Loan_Status":{'N':0,'Y':1}},inplace=True)

loan_dataset.head()

loan_dataset['Dependents'].value_counts()

"""REPLACING VALUE OF 3+ TO 4"""

loan_dataset= loan_dataset.replace(to_replace='3+',value=4)

loan_dataset['Dependents'].value_counts()

"""DATA VISUALIZATION"""

#EDUCATION & LOAN STATUS
sns.countplot(x='Education',hue='Loan_Status',data=loan_dataset)

sns.countplot(x='Married',hue='Loan_Status',data=loan_dataset)

"""#convert categirical colums to numerical values"""

loan_dataset.replace({ 'Married': { 'No': 0, 'Yes':1}, 'Gender': { 'Male': 1, 'Female': 0}, 'Self_Employed':{'No': 0, 'Yes':1},
'Property_Area':{'Rural':0, 'Semiurban': 1, 'Urban':2},'Education': { 'Graduate' : 1, 'Not Graduate': 0}}, inplace=True)

loan_dataset.head()

X=loan_dataset.drop(columns=['Loan_Status','Loan_ID'],axis=1)
Y=loan_dataset['Loan_Status']

print(X)
print(Y)

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.1,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""TRAINING THE MODEL SUPPORT VECTOR MACHINE"""

classifer=svm.SVC(kernel='linear')

classifer.fit(X_train,Y_train)

"""MODEL EVALUATION"""

X_train_prediction = classifer.predict(X_train)
training_data_accuracy =accuracy_score(X_train_prediction,Y_train)

print('accuracy on traing data:',training_data_accuracy)

X_test_prediction=classifer.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print('accuracy score on test data:',test_data_accuracy)

"""MAKING PREDICTION

"""

# **Important**: Make sure to fit the scaler on the training data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)  # Fit the scaler on training data
X_test_scaled = scaler.transform(X_test)  # Transform test data using the fitted scaler

# Now, let's predict the output for new input data:

# New input data (replace with actual input values in the same format as your training data)
# For example, letâ€™s assume the input data contains:
# [Gender, Married, ApplicantIncome, CoapplicantIncome, LoanAmount, Loan_Amount_Term, Credit_History, Property_Area, Education, Self_Employed]
new_data = np.array([[1, 1, 5000, 2000, 128, 360, 1, 0, 1, 2,1]])  # Example values

# Standardize the new data using the fitted scaler (do not use fit here)
new_data_scaled = scaler.transform(new_data)  # Use transform() on new data

# Predict the loan approval status using the trained classifier
prediction = classifer.predict(new_data_scaled)

# Output the prediction
print('Loan Approval Prediction:', 'Approved' if prediction[0] == 1 else 'Not Approved')

